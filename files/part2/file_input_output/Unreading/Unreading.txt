Unreading
---------
  
	In parser programs it is often useful to examine the next character in the input stream without removing it from the stream. This is called "peeking ahead" at the input because your program gets a glimpse of the input it will read next. 
	Using stream I/O, you can peek ahead at input by first reading it and then unreading it (also called pushing it back on the stream). Unreading a character makes it available to be input again from the stream, by the next call to fgetc or other input function on that stream. 

What Unreading Means
--------------------
	Here is a pictorial explanation of unreading. Suppose you have a stream reading a file that contains just six characters, the letters `foobar'. Suppose you have read three characters so far. The situation looks like this: 
	f  o  o  b  a  r
	         ^

	so the next input character will be `b'. 
	 If instead of reading `b' you unread the letter `o', you get a situation like this: 
	f  o  o  b  a  r
	         |
	      o--
	      ^

	so that the next input characters will be `o' and `b'. 
	 If you unread `9' instead of `o', you get this situation: 
	f  o  o  b  a  r
	         |
	      9--
	      ^

	so that the next input characters will be `9' and `b'. 


Using ungetc To Do Unreading
----------------------------
	The function to unread a character is called ungetc, because it reverses the action of getc

	Function: int ungetc (int c, FILE *stream) 
	------------------------------------------
	The ungetc function pushes back the character c onto the input stream stream. So the next input from stream will read c before anything else. 
	 If c is EOF, ungetc does nothing and just returns EOF. This lets you call ungetc with the return value of getc without needing to check for an error from getc.
